{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","str","setStr","colorRed","setColorRed","colorBlue","setColorBlue","isZero","setIsZero","useEffect","setInterval","random","sting","rs","length","Math","floor","generator","palindrom","split","reverse","join","blue","every","el","includesZero","some","className","classNames","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QA0EeA,MA5Df,WACE,MAAsBC,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAkCJ,oBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAA4BN,oBAAS,GAArC,mBAAOO,EAAP,KAAeC,EAAf,KA4BA,OA1BAC,qBAAU,WACRC,aAAY,WACV,IAAIC,EAhBQ,SAACC,GAEjB,IADA,IAAIC,EAAK,GACFA,EAAGC,OAAS,GACjBD,GAAMD,EAAMG,KAAKC,MAAMD,KAAKJ,SAAWC,EAAME,SAE/C,OAAOD,EAWUI,CAlBP,wCAoBNf,GAAO,WACL,IAAIgB,EAAYP,EAAOQ,MAAM,IAAIC,UAAUC,KAAK,IAC5CC,EAAOX,EAAOQ,MAAM,IAAII,OAAM,SAAAC,GAAE,OAAIA,GAAM,KAC1CC,EAAed,EAAOQ,MAAM,IAAIO,MAAK,SAAAF,GAAE,MAAW,MAAPA,KAc/C,OAZIb,IAAWO,EACbd,GAAY,GACHkB,EACThB,GAAa,GACJmB,EACTjB,GAAU,IAEVJ,GAAY,GACZE,GAAa,GACbE,GAAU,IAGLG,OAER,OACF,IAGD,sBAAKgB,UAAU,MAAf,UACE,sBAAKA,UAAU,WAAf,UACE,gHAKA,sBAAKA,UAAU,mBAAf,UACE,qFACA,wGACA,4FAGJ,qBAAKA,UAAWC,IAAW,SAAU,CACnC,eAAgBvB,EAChB,cAAeF,IAFjB,SAIGI,EACC,GAEAN,QCvDK4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6a533bea.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport './App.css';\n\nconst abc = \"abcdefghijklmnopqrstuvwxyz0123456789\";\n\nconst generator = (sting) => {\n  let rs = \"\";\n  while (rs.length < 5) {\n    rs += sting[Math.floor(Math.random() * sting.length)];\n  }\n  return rs;\n};\n\nfunction App() {\n  const [str, setStr] = useState('');\n  const [colorRed, setColorRed] = useState(false);\n  const [colorBlue, setColorBlue] = useState(false);\n  const [isZero, setIsZero] = useState(false);\n\n  useEffect(() => {\n    setInterval(() => {\n      let random = generator(abc);\n\n      setStr(() => {\n        let palindrom = random.split('').reverse().join('');\n        let blue = random.split('').every(el => el >= 0);\n        let includesZero = random.split('').some(el => el === '0');\n\n        if (random === palindrom) {\n          setColorRed(true);\n        } else if (blue) {\n          setColorBlue(true);\n        } else if (includesZero) {\n          setIsZero(true);\n        } else {\n          setColorRed(false);\n          setColorBlue(false);\n          setIsZero(false)\n        }\n\n        return random;\n      });\n    }, 3000);\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <div className=\"describe\">\n        <div>\n          Each value must be 5 characters long.\n          The value is displayed every 3 seconds.\n        </div>\n\n        <div className=\"describe__points\">\n          <div>1) if the created value is a palindrome it is red;</div>\n          <div>2) if the created value consists only of numbers, display it in blue;</div>\n          <div>3) if created value contains 0 it is not displayed.</div>\n        </div>\n      </div>\n      <div className={classNames('string', {\n        'string--blue': colorBlue,\n        'string--red': colorRed\n      })}>\n        {isZero ? (\n          ''\n        ) : (\n          str\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}